// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using wfa_scolaireDepart.Models;

namespace wfa_scolaireDepart.Models
{
    public partial class Glg_bdContext
    {
        private IGlg_bdContextProcedures _procedures;

        public virtual IGlg_bdContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Glg_bdContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IGlg_bdContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class Glg_bdContextProcedures : IGlg_bdContextProcedures
    {
        private readonly Glg_bdContext _context;

        public Glg_bdContextProcedures(Glg_bdContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetTotalCoursesResult>> GetTotalCoursesAsync(string session, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Session",
                    Size = 10,
                    Value = session ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTotalCoursesResult>("EXEC @returnValue = [dbo].[GetTotalCourses] @Session = @Session", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetTotalCoursesWithOutputAsync(string session, OutputParameter<int?> nombreDeCours, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNombreDeCours = new SqlParameter
            {
                ParameterName = "NombreDeCours",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = nombreDeCours?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Session",
                    Size = 10,
                    Value = session ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                parameterNombreDeCours,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetTotalCoursesWithOutput] @Session = @Session, @NombreDeCours = @NombreDeCours OUTPUT", sqlParameters, cancellationToken);

            nombreDeCours?.SetValue(parameterNombreDeCours.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ModifierNoteEtudiantAsync(string no_da, int? no_offreCours, decimal? note, string nom, string prenom, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "no_da",
                    Size = 14,
                    Value = no_da ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "no_offreCours",
                    Value = no_offreCours ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "note",
                    Precision = 5,
                    Scale = 2,
                    Value = note ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "nom",
                    Size = 200,
                    Value = nom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "prenom",
                    Size = 200,
                    Value = prenom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ModifierNoteEtudiant] @no_da = @no_da, @no_offreCours = @no_offreCours, @note = @note, @nom = @nom, @prenom = @prenom", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
