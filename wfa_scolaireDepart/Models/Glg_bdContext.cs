// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace wfa_scolaireDepart.Models;

public partial class Glg_bdContext : DbContext
{
    public Glg_bdContext()
    {
        using (var context = new Glg_bdContext())
        {
            var cours = new TblCour();
            cours.Nom = "objets connectés";
            cours.NoCours = "4206PMBA";
            context.TblCours.Add(cours);
            context.SaveChanges();
        }

    }

    public Glg_bdContext(DbContextOptions<Glg_bdContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Auteur> Auteurs { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Livre> Livres { get; set; }

    public virtual DbSet<TblCour> TblCours { get; set; }

    public virtual DbSet<TblDepartement> TblDepartements { get; set; }

    public virtual DbSet<TblEmploye> TblEmployes { get; set; }

    public virtual DbSet<TblEtudiant> TblEtudiants { get; set; }

    public virtual DbSet<TblInscription> TblInscriptions { get; set; }

    public virtual DbSet<TblOffreCour> TblOffreCours { get; set; }

    public virtual DbSet<TblSession> TblSessions { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=PeachNextGeN;Initial Catalog=Glg_bd;Integrated Security=True;Encrypt=False").LogTo(Console.Write, LogLevel.Information);

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Auteur>(entity =>
        {
            entity.Property(e => e.IdAuteur).ValueGeneratedNever();
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.Property(e => e.IdCategorie).ValueGeneratedNever();
        });

        modelBuilder.Entity<Livre>(entity =>
        {
            entity.Property(e => e.IdLivre).ValueGeneratedNever();

            entity.HasOne(d => d.IdCategorieNavigation).WithMany(p => p.Livres).HasConstraintName("FK_LIVRES_CATEGORIES");

            entity.HasMany(d => d.IdAuteurs).WithMany(p => p.IdLivres)
                .UsingEntity<Dictionary<string, object>>(
                    "LivresAuteur",
                    r => r.HasOne<Auteur>().WithMany()
                        .HasForeignKey("IdAuteur")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_LIVRES_AUTEURS_AUTEURS"),
                    l => l.HasOne<Livre>().WithMany()
                        .HasForeignKey("IdLivre")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_LIVRES_AUTEURS_LIVRES"),
                    j =>
                    {
                        j.HasKey("IdLivre", "IdAuteur");
                        j.ToTable("LIVRES_AUTEURS");
                        j.IndexerProperty<int>("IdLivre").HasColumnName("ID_LIVRE");
                        j.IndexerProperty<int>("IdAuteur").HasColumnName("ID_AUTEUR");
                    });
        });

        modelBuilder.Entity<TblCour>(entity =>
        {
            entity.HasKey(e => e.NoCours).HasName("PK__tbl_cour__1297542F18CD9C95");

            entity.Property(e => e.NoCours).IsFixedLength();
            entity.Property(e => e.Pond)
                .HasDefaultValue("1-1-1")
                .IsFixedLength();

            entity.HasMany(d => d.NoCoursBases).WithMany(p => p.NoCoursPrealables)
                .UsingEntity<Dictionary<string, object>>(
                    "TblPrealable",
                    r => r.HasOne<TblCour>().WithMany()
                        .HasForeignKey("NoCoursBase")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__tbl_preal__no_co__48CFD27E"),
                    l => l.HasOne<TblCour>().WithMany()
                        .HasForeignKey("NoCoursPrealable")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__tbl_preal__no_co__49C3F6B7"),
                    j =>
                    {
                        j.HasKey("NoCoursBase", "NoCoursPrealable").HasName("PK_prealable");
                        j.ToTable("tbl_prealable");
                        j.IndexerProperty<string>("NoCoursBase")
                            .HasMaxLength(8)
                            .IsFixedLength()
                            .HasColumnName("no_coursBase");
                        j.IndexerProperty<string>("NoCoursPrealable")
                            .HasMaxLength(8)
                            .IsFixedLength()
                            .HasColumnName("no_coursPrealable");
                    });

            entity.HasMany(d => d.NoCoursPrealables).WithMany(p => p.NoCoursBases)
                .UsingEntity<Dictionary<string, object>>(
                    "TblPrealable",
                    r => r.HasOne<TblCour>().WithMany()
                        .HasForeignKey("NoCoursPrealable")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__tbl_preal__no_co__49C3F6B7"),
                    l => l.HasOne<TblCour>().WithMany()
                        .HasForeignKey("NoCoursBase")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__tbl_preal__no_co__48CFD27E"),
                    j =>
                    {
                        j.HasKey("NoCoursBase", "NoCoursPrealable").HasName("PK_prealable");
                        j.ToTable("tbl_prealable");
                        j.IndexerProperty<string>("NoCoursBase")
                            .HasMaxLength(8)
                            .IsFixedLength()
                            .HasColumnName("no_coursBase");
                        j.IndexerProperty<string>("NoCoursPrealable")
                            .HasMaxLength(8)
                            .IsFixedLength()
                            .HasColumnName("no_coursPrealable");
                    });
        });

        modelBuilder.Entity<TblDepartement>(entity =>
        {
            entity.HasKey(e => e.NoDepartement).HasName("PK_departement");

            entity.Property(e => e.NoEmployeResp).IsFixedLength();

            entity.HasOne(d => d.NoEmployeRespNavigation).WithMany(p => p.TblDepartements).HasConstraintName("FK__tbl_depar__no_em__52593CB8");
        });

        modelBuilder.Entity<TblEmploye>(entity =>
        {
            entity.HasKey(e => e.NoEmploye).HasName("PK__tbl_empl__00FC3D602555DAB0");

            entity.Property(e => e.NoEmploye).IsFixedLength();

            entity.HasOne(d => d.NoDepartementNavigation).WithMany(p => p.TblEmployes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__tbl_emplo__no_de__5165187F");
        });

        modelBuilder.Entity<TblEtudiant>(entity =>
        {
            entity.HasKey(e => e.NoDa).HasName("PK__tbl_etud__E2D4DBFA852FF626");

            entity.Property(e => e.NoDa).IsFixedLength();
        });

        modelBuilder.Entity<TblInscription>(entity =>
        {
            entity.HasKey(e => new { e.NoDa, e.NoOffreCours }).HasName("PK_inscription");

            entity.Property(e => e.NoDa).IsFixedLength();

            entity.HasOne(d => d.NoDaNavigation).WithMany(p => p.TblInscriptions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inscription_da");

            entity.HasOne(d => d.NoOffreCoursNavigation).WithMany(p => p.TblInscriptions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_inscription_offreCours");
        });

        modelBuilder.Entity<TblOffreCour>(entity =>
        {
            entity.HasKey(e => e.NoOffreCours).HasName("pk_offreCours");

            entity.Property(e => e.NoCours).IsFixedLength();
            entity.Property(e => e.NoSession).IsFixedLength();

            entity.HasOne(d => d.NoCoursNavigation).WithMany(p => p.TblOffreCours)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_no_cours");

            entity.HasOne(d => d.NoSessionNavigation).WithMany(p => p.TblOffreCours)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_no_session");
        });

        modelBuilder.Entity<TblSession>(entity =>
        {
            entity.HasKey(e => e.NoSession).HasName("PK__tbl_sess__6DBB4FB997839448");

            entity.Property(e => e.NoSession).IsFixedLength();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}